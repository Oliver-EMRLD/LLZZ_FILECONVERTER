


/*
while(location_of_recordlength < statbf.st_size)
    {
    rec_len[rec_len_index] = (buffer_for_file[location_of_recordlength]*256)+buffer_for_file[location_of_recordlength+1];
    rec_loc[rec_loc_index] = location_of_recordlength;


    length_of_record = rec_len[rec_len_index];

    printf("Recordsize                      :::: %i\n", rec_len[rec_len_index]);
    rec_len_index++;
    rec_loc_index++;




    printf("Whereis 2 byte  :::: %li\n", location_of_recordlength);
    location_of_recordlength += length_of_record;
    if(length_of_record > largest_record_size)
        {
        largest_record_size = length_of_record;
        }
    count_record++;
    }

*/











/*

if(strncmp("yes", HEX, 3) == 0)
    {
    printf("\n\nHEX\n\n");
    //sleep(2);
    arr_converted_bytes = malloc((largest_record_size-4+SUFFIX_LENGTH)*count_record*3);
    printf("MALOC : %lli\n", (largest_record_size-4+SUFFIX_LENGTH)*count_record);
    printf("Largest record size :::::::::: %i\n", largest_record_size);
    printf("How many records: %lli\n", count_record);
    printf("Last record location : %i\n", rec_loc[rec_loc_index-1]);


    memset(arr_converted_bytes, 0, (largest_record_size-4+SUFFIX_LENGTH)*count_record*3);



    for(x = 0 ; x < rec_len_index ; x++)
        {

        printf("%i\n", x);

        memset(&LineInHex, 0, 40000);
        memset(&tmp_char, 0, 20);
        memset(record_len_in_str, 0, 10);

        sprintf(&record_len_in_str, "%d", rec_len[x]-4);

        strncpy(tmp_char, suffix, strlen(suffix)-strlen(record_len_in_str)-1);
        strncat(tmp_char, record_len_in_str, strlen(record_len_in_str));
        strncat(tmp_char, ">", 2);

        printf("WRITING     : %s\n", tmp_char);

        printf("Write location: %li\n", rec_loc[x]+4);
        printf("Writing %i long \n", rec_len[x]-4);


        for(int HexInd = 0 ; HexInd <= rec_len[x]-4 ; HexInd++)
            {
            //printf("%i\n", HexInd);
            //printf("CHAR ::: %X\n", *(buffer_for_file+4+rec_loc[x]+HexInd));

            chartohex(*(buffer_for_file+4+rec_loc[x]+HexInd),  &LineInHex[HexInd*2]);
            }

            //printf("\n\n HEX: %s \n\n", LineInHex);
            //printf("REC_LEN ::: %i\n", rec_len[x]-4);

        memcpy(arr_converted_bytes+PointerIncrementation*CharLineLoc, buffer_for_file+4+rec_loc[x], rec_len[x]-4);
        memcpy(arr_converted_bytes+PointerIncrementation*CharLineLoc+rec_len[x]-4, tmp_char, strlen(tmp_char));

        for(UpprByte = 0 ; UpprByte <= (rec_len[x]-4)*2+1 ; UpprByte+=2)
            {
            TmpPointerIncrement = (PointerIncrementation*(CharLineLoc+1)+afaszomkivanmarkesovan);
            arr_converted_bytes[TmpPointerIncrement] = LineInHex[UpprByte];
            //printf("%c", arr_converted_bytes[TmpPointerIncrement]);
            //printf("Upper byte %i\n", TmpPointerIncrement);
            afaszomkivanmarkesovan++;
            }

            //printf("\n");
            memcpy(arr_converted_bytes+TmpPointerIncrement, tmp_char, strlen(tmp_char));
            afaszomkivanmarkesovan = 0;

        for(LowrByte = 1 ; LowrByte <= (rec_len[x]-4)*2+1 ; LowrByte+=2)     //largest_record_size-4 ; LowrByte+=2)
            {
            TmpPointerIncrement = (PointerIncrementation*(CharLineLoc+2)+afaszomkivanmarkesovan);
            arr_converted_bytes[TmpPointerIncrement] = LineInHex[LowrByte];
            //printf("%c", arr_converted_bytes[TmpPointerIncrement]);
            //printf("Lower byte: %i\n", TmpPointerIncrement);
            afaszomkivanmarkesovan++;
            }

            memcpy(arr_converted_bytes+TmpPointerIncrement, tmp_char, strlen(tmp_char));

    CharLineLoc += 3;
    }


    write(file_converted, arr_converted_bytes, (PointerIncrementation)*count_record*3);

    close(file_to_convert);
    close(file_converted);
    return 0;
    }








arr_converted_bytes = malloc((largest_record_size-4+SUFFIX_LENGTH)*count_record);
printf("MALOC : %lli\n", (largest_record_size-4+SUFFIX_LENGTH)*count_record);
printf("Largest record size :::::::::: %i\n", largest_record_size);
printf("How many records: %lli\n", count_record);
printf("Last record location : %i\n", rec_loc[rec_loc_index-1]);


memset(arr_converted_bytes, 0, (largest_record_size-4+SUFFIX_LENGTH)*count_record);



for(x = 0 ; x < rec_len_index ; x++)
    {
    printf("%i\n", x);

    memset(&tmp_char, 0, 20);
    memset(record_len_in_str, 0, 10);

    sprintf(&record_len_in_str, "%d", rec_len[x]-4);

    strncpy(tmp_char, suffix, strlen(suffix)-strlen(record_len_in_str)-1);
    strncat(tmp_char, record_len_in_str, strlen(record_len_in_str));
    strncat(tmp_char, ">", 2);

    printf("WRITING     : %s\n", tmp_char);

    printf("Write location: %li\n", rec_loc[x]+4);
    printf("Writing %i long \n", rec_len[x]-4);


    memcpy(arr_converted_bytes+PointerIncrementation*x, buffer_for_file+4+rec_loc[x], rec_len[x]-4);
    memcpy(arr_converted_bytes+PointerIncrementation*x+rec_len[x]-4, tmp_char, strlen(tmp_char));
    }


write(file_converted, arr_converted_bytes, (PointerIncrementation)*count_record);



close(file_to_convert);
close(file_converted);
return 0;
}


*/
